#!/usr/bin/env python

HELP_TEXT = """
git-gpg version 0.1.1 - remote encrypted git repositories

Usage:

    # Add a remote.
    git gpg add REMOTE_NAME ARCHIVE_PATH

    # Remove a remote.
    git gpg remove REMOTE_NAME

    # Show gpg remotes.
    git gpg show

    # Show details of a gpg remote, including recipients and branches.
    git gpg show REMOTE_NAME

    # Add recipient.
    git gpg add-recipient REMOTE_NAME RECIPIENT

    # Remove recipient.
    git gpg remove-recipient REMOTE_NAME RECIPIENT

    # Push to a remote. See `git help push` for options.
    git gpg push [OPTIONS] REMOTE_NAME [REFSPEC]

    # Pull from a remote. See `git help push` for options.
    git gpg pull [OPTIONS] REMOTE_NAME [REFSPEC]

    # Fetch latest code from a remote. See `git help fetch` for options.
    git gpg fetch [OPTIONS] REMOTE_NAME [REFSPEC]

    # Show this screen.
    git gpg help
"""

import glob
import hashlib
import os
import re
import shutil
import subprocess
import sys
import time

def error_and_exit(s):
    print(s)
    exit(-1)


def ensure_path(path):
    if not os.path.exists(path):
        os.makedirs(path)


def delete_path(path):
    if os.path.exists(path):
        shutil.rmtree(path)


def get_staging_path(remote_name):
    return os.path.join(".git", "gpg_remotes", remote_name)


def assert_git_directory():
    """
    Exit with error if we are not in a git repo.
    """
    if not os.path.isdir(".git"):
        error_and_exit("Not in a git repository.")


def ensure_remote_exists(remote_name):
    """
    Exit with error if the remote is missing or not configured
    correctly.
    """
    remote_repo_path = get_gpg_config(remote_name, "url")
    staging_path = get_staging_path(remote_name)
    local_repo_path  = os.path.join(staging_path, "git")
    local_gpg_path   = os.path.join(staging_path, "git.gpg")
    gpg_recipients   = get_all_config(remote_name, "gpg-recipient")
    # Make sure the .git/config knows about remote_name.
    if remote_repo_path is None:
        error_and_exit("Could not find git gpg remote '{}'.".format(remote_name))
    # Make sure all required paths exist.
    if not os.path.exists(staging_path):
        ensure_path(staging_path)
        print("Created staging path '{}'.".format(staging_path))
    if not os.path.exists(local_repo_path):
        subprocess.call(["git", "init", "--bare", local_repo_path])
        print("Created git repository '{}'.".format(local_repo_path))
    if get_remote_config(remote_name, 'url') is None:
        subprocess.check_call(["git", "remote", "add", remote_name, local_repo_path])
        print("Adding git remote named '{}'.".format(remote_name))
    if not os.path.exists(local_gpg_path):
        ensure_path(staging_path)
        print("Created gpg staging path '{}'.".format(local_gpg_path))


def assert_remote_unchanged(remote_name):
    """
    Exit with error if the remote repo has been updated since we last pulled changes.
    """
    _download_remote_lock(remote_name)
    if get_gpg_config(remote_name, "remote-lock") != get_gpg_config(remote_name, "local-lock"):
        error_and_exit("The gpg remote may have changed. Run `git gpg pull {}`".format(remote_name))


def get_remote_repo_path(args):
    """
    Return the remote blob path specified on the command line.
    """
    if len(sys.argv) < 2:
        error_and_exit("Must provide a remote blob remote path.")
    return sys.argv[1]


def get_current_git_branch():
    """
    Return the current git branch.
    """
    return subprocess.check_output(["git", "rev-parse", "--abbrev-ref", "HEAD"]).strip().decode()


def add_gpg_config(remote_name, key, value):
    """
    Add a new value to a list of existing values.
    """
    new_key = "gpg-remote.{}.{}".format(remote_name, key)
    subprocess.check_call(["git", "config", "--local", "--add", new_key, value])


def set_gpg_config(remote_name, key, value):
    """
    Set a config value.
    """
    new_key = "gpg-remote.{}.{}".format(remote_name, key)
    subprocess.check_call(["git", "config", "--local", new_key, value])


def get_gpg_config(remote_name, key):
    new_key = "gpg-remote.{}.{}".format(remote_name, key)
    p = subprocess.Popen(["git", "config", new_key], stdout = subprocess.PIPE)
    p.wait()
    if p.returncode == 0:
        return p.communicate()[0].strip().decode()
    else:
        return None


def get_remote_config(remote_name, key):
    new_key = "remote.{}.{}".format(remote_name, key)
    p = subprocess.Popen(["git", "config", new_key], stdout = subprocess.PIPE)
    p.wait()
    if p.returncode == 0:
        return p.communicate()[0].strip().decode()
    else:
        return None


def get_all_config(remote_name, key):
    new_key = "gpg-remote.{}.{}".format(remote_name, key)
    p = subprocess.Popen(["git", "config", "--get-all", new_key], stdout = subprocess.PIPE)
    p.wait()
    if p.returncode == 0:
        array = p.communicate()[0].decode().split("\n")
        array = filter(lambda x: x != None and x != "", array)
        return list(map(lambda x: x.strip(), array))
    else:
        return []


def unset_gpg_config(remote_name, key, value = None):
    new_key = "gpg-remote.{}.{}".format(remote_name, key)
    if value == None:
        subprocess.call(["git", "config", "--local", "--unset", new_key])
    else:
        subprocess.call(["git", "config", "--local", "--unset", new_key, value])


def get_user_email():
    return subprocess.check_output(["git", "config", "user.email"]).strip().decode()


def get_remotes_list():
    remotes = []
    try:
        output = subprocess.check_output(["git", "config", "--get-regexp", "gpg-remote.*"]).decode()
    except:
        output = ""

    for line in output.split("\n"):
        m = re.match(".*\.(.*)\..* .*", line)
        if m != None:
            remotes.append(m.group(1))
    return sorted(list(set(remotes)))


def get_branches(remote_name):
    heads_dir = os.path.join(get_staging_path(remote_name), "git", "refs", "heads")
    if not os.path.exists(heads_dir):
        return []
    glob_dir = os.path.join(heads_dir, "*")
    return [path.replace(heads_dir + "/", "") for path in glob.glob(glob_dir)]


def generate_lock_value():
    s = get_user_email() + str(time.time()*1000000)
    return hashlib.md5(s.encode('utf-8')).hexdigest()

###
# Commands
###

def do_help():
    print(HELP_TEXT)


def do_show(remote_name = None):
    remotes = get_remotes_list()
    if remote_name == None:
        if len(remotes) > 0:
            print("\n".join(remotes))
        else:
            print("No remotes defined.")
    elif not remote_name in remotes:
        print("Remote '{}' not found.".format(remote_name))
    else:
        print("gpg remote {}".format(remote_name))
        print("- URL: {}".format(get_gpg_config(remote_name, "url")))

        # Print recipients.
        recipients = get_all_config(remote_name, "gpg-recipient")
        if len(recipients) == 0:
            print("- No recipients.")
        else:
            print("- Recipients:")
            for recipient in recipients:
                print("  - {}".format(recipient))

        branches = get_branches(remote_name)
        if len(branches) == 0:
            print("- No branches. (Try pulling?)")
        else:
            print("- Branches:")
            for branch in branches:
                print("  - {}".format(branch))


def do_add(remote_name, remote_repo_path):
    """
    Add an encrypted remote repository.
    """
    assert_git_directory()

    # Assemble some paths.
    path = get_staging_path(remote_name)
    if os.path.exists(path):
        error_and_exit("The remote name '{}' already exists.".format(remote_name))
    ensure_path(path)

    # Set configuration.
    set_gpg_config(remote_name, "url", remote_repo_path)
    ensure_remote_exists(remote_name)

    # Success!
    print("Added gpg remote '{}'.".format(remote_name))
    print("Remember to add recipients!")


def do_remove(remote_name):
    """
    Remove an encrypted remote repository."
    """
    assert_git_directory()

    # Remove the files.
    path = get_staging_path(remote_name)
    delete_path(path)

    # Unset configuration.
    unset_gpg_config(remote_name, "url")
    unset_gpg_config(remote_name, "gpg-recipient")

    # Success!
    print("Removed gpg remote '{}'.".format(remote_name))


def do_add_recipient(remote_name, recipient):
    """
    Add a recipient to the specified remote.
    """
    unset_gpg_config(remote_name, "gpg-recipient", recipient)
    add_gpg_config(remote_name, "gpg-recipient", recipient)
    print("Added {} to remote {}".format(recipient, remote_name))


def do_remove_recipient(remote_name, recipient):
    """
    Remove a recipient from the specified remote.
    """
    unset_gpg_config(remote_name, "gpg-recipient", recipient)
    print("Removed {} from remote {}".format(recipient, remote_name))


def _download_remote_lock(remote_name):
    """
    Refresh the lock value.
    """
    # Prepare some vars.
    remote_lock_path = get_gpg_config(remote_name, "url") + ".lock"
    staging_path     = get_staging_path(remote_name)
    local_lock_path  = os.path.join(staging_path, "remote.gpg") + ".lock"

    # Fetch the remote lock value.
    if subprocess.call(["rsync", remote_lock_path, local_lock_path], stdout = subprocess.PIPE, stderr = subprocess.PIPE) == 0:
        with open(local_lock_path, 'r') as f:
            lock_value = f.read()
        set_gpg_config(remote_name, "remote-lock", lock_value)
    else:
        lock = generate_lock_value()
        set_gpg_config(remote_name, "local-lock", lock)
        set_gpg_config(remote_name, "remote-lock", lock)

def _upload_local_lock(remote_name):
    # Prepare some vars.
    remote_lock_path = get_gpg_config(remote_name, "url") + ".lock"
    staging_path     = get_staging_path(remote_name)
    local_lock_path  = os.path.join(staging_path, "remote.gpg") + ".lock"
    lock_value       = get_gpg_config(remote_name, "local-lock")

    # Write the lock value.
    with open(local_lock_path, 'w') as f:
        f.write(lock_value)

    # Fetch the remote lock value.
    if subprocess.call(["rsync", local_lock_path, remote_lock_path], stdout = subprocess.PIPE, stderr = subprocess.PIPE) != 0:
        error_and_exit("Could not update the remote lock.")

def recipients_to_arg_list(recipients):
    l = []
    for recipient in recipients:
        l.append("--recipient")
        l.append(recipient)
    return(l)

def _download_remote_files(remote_name):
    """
    Download the remote blob.
    Decrypt the blob into the staging repository.
    """
    assert_git_directory()
    ensure_remote_exists(remote_name)

    # Prepare some vars.
    remote_repo_path = get_gpg_config(remote_name, "url")
    staging_path     = get_staging_path(remote_name)
    local_gpg_path   = os.path.join(staging_path, "git.gpg")
    local_repo_path  = os.path.join(staging_path, "git")
    gpg_recipients   = get_all_config(remote_name, "gpg-recipient")

    if len(gpg_recipients) == 0:
        error_and_exit("This remote does not have any recipients.")
    else:
        gpg_recipients = recipients_to_arg_list(gpg_recipients)

    # Transfer files from remote.
    print("Fetching files. This may take a second.")
    ensure_path(local_gpg_path)
    if subprocess.call(["rsync", "-am", "--delete", "--delete-excluded", remote_repo_path + "/", local_gpg_path]) != 0:
        error_and_exit("Could not rsync from '{}'.".format(remote_repo_path))

    # Delete any files in local_repo_path that don't exist in local_gpg_path.
    paths = []
    ensure_path(local_repo_path)
    for root, dirnames, filenames in os.walk(local_repo_path):
        for file in filenames:
            path = os.path.join(root, file)
            if not os.path.isfile(path.replace(local_repo_path, local_gpg_path) + ".gpg"):
                print("Removing old file {}.".format(path))
                os.remove(path)

    # Get a list of files to decrypt.
    paths = []
    for root, dirnames, filenames in os.walk(local_gpg_path):
        for filename in filenames:
            path = os.path.join(root, filename)
            output_path = path.replace(local_gpg_path, local_repo_path)[0:-4]

            # Only decrypt .gpg files.
            if not path.endswith(".gpg"):
                continue

            # Don't decrypt an object that already exists.
            if path.find("/objects/") >= 0 and os.path.isfile(output_path):
                # Don't decrypt an object file that already exists.
                continue

            # Add to list of files to decrypt.
            paths.append(path)

    # Decrypt the files.
    if len(paths) > 0:
        print("Decrypting files.")
        if subprocess.call(["gpg", "--decrypt-files", "--quiet"] + gpg_recipients + paths) != 0:
            error_and_exit("Could not decrypt '{}'".format(path))

    # Move files and clean up times.
    for path in paths:
        # Move file to the correct place.
        output_path = path.replace(local_gpg_path, local_repo_path)[0:-4]
        ensure_path(os.path.dirname(output_path))
        os.rename(path[0:-4], output_path)

        # Fix the modified time.
        time = os.path.getmtime(path)
        os.utime(output_path, (time, time))

    # Extract the "refs.tgz" file.
    refs_path = os.path.join(local_repo_path, "refs.tgz")
    if subprocess.call(["tar", "-zx", "-f", refs_path, "-C", local_repo_path]) != 0:
        error_and_exit("Could not extract {}".format(refs_path))

    # Fetch the remote lock and update the local lock.
    _download_remote_lock(remote_name)
    set_gpg_config(remote_name, "local-lock", get_gpg_config(remote_name, "remote-lock"))

    # Success!
    print("Downloaded files from from gpg remote '{}'.".format(remote_name))

def _upload_local_files(remote_name):
    """
    Tar, gzip, and encrypt the staging repository.
    Upload to the remote blob.
    """
    assert_git_directory()
    ensure_remote_exists(remote_name)

    # Ensure that we know about the latest copy of the blob.
    assert_remote_unchanged(remote_name)

    # Update the lock. We do this first so that if other processes have tried
    # to upload changes, then both of them encounter an error and back off.
    new_lock = generate_lock_value()
    set_gpg_config(remote_name, "local-lock", new_lock)
    set_gpg_config(remote_name, "remote-lock", new_lock)
    _upload_local_lock(remote_name)

    # Prepare some vars.
    remote_repo_path = get_gpg_config(remote_name, "url")
    staging_path     = get_staging_path(remote_name)
    local_gpg_path   = os.path.join(staging_path, "git.gpg")
    local_repo_path  = os.path.join(staging_path, "git")
    gpg_recipients   = get_all_config(remote_name, "gpg-recipient")

    if len(gpg_recipients) == 0:
        error_and_exit("This remote does not have any recipients.")
    else:
        gpg_recipients = recipients_to_arg_list(gpg_recipients)

    # Delete any files in local_repo_path that don't exist in local_gpg_path.
    for root, dirnames, filenames in os.walk(local_gpg_path):
        for file in filenames:
            path = os.path.join(root, file)
            if not os.path.isfile(path.replace(local_gpg_path, local_repo_path)[0:-4]):
                print("Removing old file {}.".format(path))
                os.remove(path)

    # Create the "refs.tgz" file.
    refs_path = os.path.join(local_repo_path, "refs.tgz")
    if subprocess.call(["tar", "-zc", "-f", refs_path, "-C", local_repo_path, "refs"]) != 0:
        error_and_exit("Could not create {}".format(refs_path))

    # Get a list of files to encrypt.
    paths = []
    for root, dirnames, filenames in os.walk(local_repo_path):
        for filename in filenames:
            path = os.path.join(root, filename)
            output_path = path.replace(local_repo_path, local_gpg_path) + ".gpg"

            # Only encrypt actual files.
            if os.path.isdir(path):
                continue

            # Only encrypt files in certain paths.
            if not path.find("/HEAD") >= 0 and \
                not path.find("/refs.tgz") >= 0 and \
                not path.find("/packed-refs") >= 0 and \
                not path.find("/objects/") >= 0:
                continue

            # Don't encrypt already encrypted object files.
            if path.find("/objects/") >= 0 and os.path.exists(output_path):
                continue

            # Add to list for encryption.
            paths.append(path)

    if len(paths) > 0:
        # Encrypt the files.
        print("Encrypting files...")
        if subprocess.call(["gpg", "--batch", "--yes", "--encrypt-files"] + gpg_recipients + paths) != 0:
            error_and_exit("Could not encrypt '{}'.".format(local_repo_path))

        # Move the files and clean up times.
        for path in paths:
            # Move file to the correct place.
            output_path = path.replace(local_repo_path, local_gpg_path) + ".gpg"
            ensure_path(os.path.dirname(output_path))
            os.rename(path + ".gpg", output_path)

            # Update the modification time.
            time = os.path.getmtime(path)
            os.utime(output_path, (time, time))

    # Upload the encrypted files.
    # IMPORTANT: NEVER PUT QUOTES AROUND THE --include OR --exclude FLAGS IN
    # RSYNC. IT WILL CAUSE THE FLAGS TO BE IGNORED.
    print("Uploading files. This may take a second.")
    if subprocess.call([
        "rsync", "-am", "--delete", "--delete-excluded", "--delay-updates",
        "--include=*/", "--include=HEAD.gpg", "--include=packed-refs.gpg", "--include=refs.tgz.gpg", "--include=objects/*/*.gpg", "--exclude=*",
        ".", remote_repo_path], cwd = local_gpg_path) != 0:
        error_and_exit("Could not upload '{}' to '{}'.".format(local_repo_path, remote_repo_path))

    # Ensure that we know about the latest copy of the blob.
    assert_remote_unchanged(remote_name)

    # Generate a lock. Set the local and remote lock.
    new_lock = generate_lock_value()
    set_gpg_config(remote_name, "remote-lock", new_lock)
    set_gpg_config(remote_name, "local-lock", new_lock)
    _upload_local_lock(remote_name)

    # Success!
    print("Uploaded files to gpg remote '{}'.".format(remote_name))

def do_pull(*args):
    """
    Pull changes from the remote blob into our staging
    repository, then pull them into the local repository.
    """
    assert_git_directory()
    remote_name = args[0]
    _download_remote_files(remote_name)
    if subprocess.call(["git", "pull"] + list(args)) == 0:
        print("Pulled from gpg remote '{}'.".format(remote_name))

def do_fetch(*args):
    """
    Fetch changes from the remote blob into our staging
    repository, then pull them into the local repository.
    """
    assert_git_directory()
    remote_name = args[0]
    _download_remote_files(remote_name)
    if subprocess.call(["git", "fetch"] + list(args)) == 0:
        print("Fetched from gpg remote '{}'.".format(remote_name))

def do_push(*args):
    """
    Push changes from the local repository into the staging repository, then
    push them to the remote blob.
    """
    assert_git_directory()
    remote_name = args[0]
    ensure_remote_exists(remote_name)
    assert_remote_unchanged(remote_name)

    # Push from our local repository into the staging repository.
    if subprocess.call(["git", "push"] + list(args)) == 0:
        _upload_local_files(remote_name)
        print("Pushed to gpg remote '{}'.".format(remote_name))

###
# Run
###
# Calls do_add, do_remove, do_pull, etc.
script_name = sys.argv.pop(0)
if len(sys.argv) == 0:
    do_show()
else:
    command = sys.argv.pop(0)
    method = "do_" + command.replace("-", "_")
    if method in locals():
        try:
            locals()[method](*sys.argv)
        except TypeError as e:
            error_and_exit("Invalid arguments for command '{}'\n({}).".format(command, e))
    else:
        print("'{}' is not a valid command. Run 'git gpg help' for help.".format(method))
